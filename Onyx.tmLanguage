<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>name</key>
	<string>Onyx</string>

	<key>uuid</key>
	<string>3492DA0A-255E-48FD-9C64-474747474747</string>

	<key>comment</key>
	<string>
	TODO: unresolved issues
	</string>

	<key>fileTypes</key>
	<array>
		<string>onyx</string>
	</array>

	<key>firstLineMatch</key>
	<string>^#!/.*\bonyx</string>

	<key>foldingStartMarker</key>
	<string>(?x)^
	    (\s*+
	        ((?:abstract )?module|mixin|class|struct|type|def(?!.*\bend\s*$)
	        |unless|if
	        |case
	        |begin
	        |for|while|until
	        |^=begin
	        |(  "(\\.|[^"])*+"          # eat a double quoted string
	        	| '(\\.|[^'])*+'        # eat a single quoted string
	        	|   [^-"']                # eat all but comments and strings
	         )*
	         (
	         	\s
	         	(do|begin|case)
	         	| (?&lt;!\$)[-+=&amp;|*/~%^&lt;&gt;~] \s*+ (if|unless)
	         )
	        )\b
	        (?! [^;]*+ ; .*? \bend\b )
	    |(  "(\\.|[^"])*+"              # eat a double quoted string
	     | '(\\.|[^'])*+'            # eat a single quoted string
	     |   [^-"']                    # eat all but comments and strings
	     )*
	     ( \{ (?!  [^}]*+ \} )
	     | \[ (?! [^\]]*+ \] )
	     )
	    ).*$
	|   -- .*? \(fold\) \s*+ $         # Sune’s special marker
	</string>

	<key>foldingStopMarker</key>
	<string>(?x)
		(   (^|;) \s*+ end   \s*+ (-- .*)? $
		|   (^|;) \s*+ end \. .* $
		|   ^     \s*+ [}\]] ,? \s*+ (-- .*)? $
		|   -- .*? \(end\) \s*+ $    # Sune’s special marker
		|   ^=end
		)</string>

	<key>keyEquivalent</key>
	<string>^~R</string>

	<key>scopeName</key>
	<string>source.onyx</string>

	<key>patterns</key>
	<array>




		<!-- dict>
			<key>comment</key>
			<string>FOOOOOOOO</string>
			<key>begin</key>
			<string>(?x)
				(?: [a-zA-Z_\x{80}-\x{10FFFF}] [-\x{80}-\x{10FFFF}\w] * (?: [?!%'] | =(?!&gt;) )? )


				# make sure we've got the arrow finish - else it's not a fn-def!
				(?=
					(?: (?:\\\n) | [^\n] ) +
					(?: [-=~][-=~]?&gt;(!?) )
				)
			</string>
			<key>end</key>
			<string>-></string>
			<key>name</key>
			<string>comment.onyx</string>
		</dict -->





		<dict>
			<key>comment</key>
			<string>the method pattern comes from the symbol pattern, see there for a explaination</string>

			<key>contentName</key>
			<string>   xxx.variable.parameter.function.onyx    </string>

			<key>name</key>
			<string>meta.function.method.with-arguments.onyx</string>

			<key>begin</key>
			<string>(?x)
			         (?&lt;=
			         	^ |
			         	\x{20} |
			         	= |
			         	\(
			         )

	  	         	 # the def keyword
			         (
		         		def (?:\x{20}|(?:\\ \n)) |
		         		fn (?:\x{20}|(?:\\ \n)) |
		         		fx (?:\x{20}|(?:\\ \n)) |
		         		\\ |


		         		# *TODO* the lambda sym must be discounted in identifer of fn!

		         		\x{03bb} |
		         		\x{039b}
			         ) ?
			         \s* # (?:\x{20}|(?:\\\n))*

			         # complete pathed method name
			         (?:
			         	# a method name prefix / path
			         	(
				         	(?:
				         		[A-Z_\x{80}-\x{10FFFF}] [-\x{80}-\x{10FFFF}\w]* (?: \.|::)
				         	) *
			         	)
			           	(
			           		(?:
								# the method name
			           			(?: [a-zA-Z_\x{80}-\x{10FFFF}] [-\x{80}-\x{10FFFF}\w] * (?: [?!%'] | =(?!&gt;) )? )
			           			 |
			           			# …or an operator method
				           		(?: ===? | \(\) | &gt;[&gt;=]? | &lt;=&gt; | &lt;[&lt;=]? | [%&amp;`/\|] | \*\*? | =?~ | [-+]@? | \[\]=? )
				           	)
			           	)
			         ) ?
			         (?:\x{20}|(?:\\\n))*

 					 # the opening parenthesis for parameters
			         ( \( )

			         # make sure we've got the arrow finish - else it's not a fn-def!
			         (?=
			         	(?: (?:\\\n) | [^\n] ) +
						(?: [-=~][-=~]?&gt;(!?) )
			         )
	        </string>

			<key>end</key>
			<string>(?x)
				# Params ending parentheses
				( \) )

				# Possible return type
				(
					(?:\x{20}|(?:\\ \n))*
					[:'`.]?
					(?:\x{20}|(?:\\ \n))*
					# *TODO* also grouping and pipe
					(?:
						!
						|
						(?:
							[A-Z][\x{80}-\x{10FFFF}\w\[\]]*
						)
					)
				) ?

				# A fn-def arrow
				(?:\x{20}|(?:\\\n))*
				(
					[-=~][-=~]?&gt;(!?)
				)
			</string>

			<key>patterns</key>
			<array>

				<dict>
					<key>match</key>
					<string>(?x)
						# Type annotation?
						(?:\x{20}|(?:\\\n)) * ?
						(?:
							['`:.]
							  |
							\s(?=[A-Z\[])
						)
						(?:\x{20}|(?:\\\n)) *

						# Type manipulation modifier?
						(?:
							mut
							(?= [\x{20}\),\\] )
							(?:\x{20}|(?:\\\n))*
						) ?

						# Type name / declaration
						(?:
							\[ ?
							# Name
							(?:
								[A-Z][\[\]\w\x{80}-\x{10FFFF}]*
							)
							 |
							# Sum Type
							(?:
								\(
								(?:\x{20}|(?:\\\n))*
								[A-Z][\[\]\w\x{80}-\x{10FFFF}]+
								(
									(?:\x{20}|(?:\\\n))*
									\|
									(?:\x{20}|(?:\\\n))*
									[A-Z] [\[\]\w\x{80}-\x{10FFFF}]*
								)*
								(?:\x{20}|(?:\\\n))*
								\)
								(?:\x{20}|(?:\\\n))*
							)
							\] ?
						) ?
						# (?=[\),])
					</string>
					<key>name</key>
					<string>support.function.other.type-param.onyx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
						(?&lt;=[^(, ])
						(?:\x{20}|(?:\\\n))*
						[\w\x{80}-\x{10FFFF}]+
					</string>
					<key>name</key>
					<string>variable.other.constant.onyx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
						(?&lt;=[\(,])
						(?:\x{20}|(?:\\\n))*
						(@?)[-a-z\x{80}-\x{10FFFF}] [\w\x{80}-\x{10FFFF}] *
					</string>
					<key>name</key>
					<string>variable.parameter.function.onyx</string>
				</dict>

				<!-- dict>
					<key>match</key>
					<string>[,`´.:=]</string>
					<key>name</key>
					<string>punctuation.separator.object.onyx</string>
				</dict -->

				<!-- <dict>
					<key>include</key>
					<string>$self</string>
				</dict> -->
			</array>

			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.def.onyx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>class.support.onyx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.onyx</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.onyx, keyword.control.secondary</string>
				</dict>
			</dict>

			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.onyx, keyword.control.secondary</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.function.other.type-param.onyx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.onyx</string>
				</dict>
			</dict>

		</dict>



		<!--
		<dict>
			<key>begin</key>
			<string>(?x)
			         (?=def\b)                                                      # an optimization to help Oniguruma fail fast
			         (?&lt;=^|\s)(def)\s+                                              # the def keyword
			         ( (?&gt;[a-zA-Z_\x{80}-\x{10FFFF}][\w\x{80}-\x{10FFFF}]*(?&gt;\.|::))?                                   # a method name prefix
			           (?&gt;[a-zA-Z_\x{80}-\x{10FFFF}][\w\x{80}-\x{10FFFF}]*(?&gt;[?!]|=(?!&gt;))?                              # the method name
			           |===?|&gt;[&gt;=]?|&lt;=&gt;|&lt;[&lt;=]?|[%&amp;`/\|]|\*\*?|=?~|[-+]@?|\[\]=?) )  # …or an operator method
			         [ \t]                                                          # the space separating the arguments
			         (?=[ \t]*[^\s#;])                                              # make sure arguments and not a comment follow
			        </string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.def.onyx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>same as the previous rule, but without parentheses around the arguments</string>
			<key>contentName</key>
			<string>variable.parameter.function.onyx</string>
			<key>end</key>
			<string>$</string>
			<key>name</key>
			<string>meta.function.method.with-arguments.onyx</string>
			<key>patterns</key>
			<array>
				<!-- <dict>
					<key>include</key>
					<string>$self</string>
				 </dict>-- >
			</array>
		</dict>

		-->

		<!--
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.def.onyx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string> the optional name is just to catch the def also without a method-name</string>
			<key>match</key>
			<string>(?x)
			         (?=def\s\b)                                                           # an optimization to help Oniguruma fail fast
			         (?&lt;=^|\s)(def\s)\b                                                    # the def keyword
			         ( \s*                                                               # an optional group of whitespace followed by…
			           ( (?&gt;[a-zA-Z_\x{80}-\x{10FFFF}][\w\x{80}-\x{10FFFF}]*(?&gt;\.|::))?                                      # a method name prefix
			             (?&gt;[a-zA-Z_\x{80}-\x{10FFFF}][\w\x{80}-\x{10FFFF}]*(?&gt;[?!%]|=(?!&gt;))?                                 # the method name
			             |===?|&gt;[&gt;=]?|&lt;=&gt;|&lt;[&lt;=]?|[%&amp;`/\|]|\*\*?|=?~|[-+]@?|\[\]=?) )
			         )?  # …or an operator method
			        </string>
			<key>name</key>
			<string>meta.function.method.without-arguments.onyx</string>
		</dict>
		-->



		<dict>
			<key>begin</key>
			<string>([\{%~\[^&lt;\x{80}-\x{FFFF}]+\s)?"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>double quoted string (allows for interpolation)</string>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>











		<dict>
			<key>name</key>
			<string>meta.class.onyx</string>

			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.class.onyx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.class.onyx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.class.onyx</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.onyx</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>support.class.other.type-param.onyx</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.onyx</string>
				</dict>
				<key>8</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.onyx</string>
				</dict>
				<key>9</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.onyx</string>
				</dict>
				<key>10</key>
				<dict>
					<key>name</key>
					<string>support.class.other.type-param.onyx</string>
				</dict>
				<key>11</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.variable.onyx</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?x)
				^
				\s*
				(abstract )?
				\s*
				(class|struct|type  |  actor)
				\s+
				(
					(
						[.A-Z_:\x{80}-\x{10FFFF}][.\w:\x{80}-\x{10FFFF}]*
						([\(\[]([,\s.a-zA-Z0-9_:\x{80}-\x{10FFFF}]+)[\)\]])?
						(
							\s*(&lt;)\s*
							[.:A-Z\x{80}-\x{10FFFF}][.:\w\x{80}-\x{10FFFF}]*
							([\(\[]([.a-zA-Z0-9_:]+\s,)[\)\]])?
						)?
					)|(
						(&lt;&lt;)
						\s*
						[.A-Z0-9_:\x{80}-\x{10FFFF}]+
					)
				)
			</string>
		</dict>

		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.module.onyx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.module.onyx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.module.first.onyx</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.inheritance.onyx</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.module.second.onyx</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.inheritance.onyx</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.module.third.onyx</string>
				</dict>
				<key>8</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.inheritance.onyx</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(module|mixin)\s+(([A-Z\x{80}-\x{10FFFF}][\w\x{80}-\x{10FFFF}]*(::))?([A-Z\x{80}-\x{10FFFF}][\w\x{80}-\x{10FFFF}]*(::))?([A-Z\x{80}-\x{10FFFF}][\w\x{80}-\x{10FFFF}]*(::))*[A-Z\x{80}-\x{10FFFF}][\w\x{80}-\x{10FFFF}]*)</string>
			<key>name</key>
			<string>meta.module.onyx</string>
		</dict>

		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.lib.onyx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.lib.onyx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.lib.first.onyx</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.inheritance.onyx</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.lib.second.onyx</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.inheritance.onyx</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.lib.third.onyx</string>
				</dict>
				<key>8</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.inheritance.onyx</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(lib)\s+(([A-Z]\w*(::))?([A-Z]\w*(::))?([A-Z]\w*(::))*[A-Z]\w*)</string>
			<key>name</key>
			<string>meta.lib.onyx</string>
		</dict>

		<dict>
			<key>comment</key>
			<string>else if is a common mistake carried over from other languages. it works if you put in a second end, but it’s never what you want.</string>
			<key>match</key>
			<string>(?&lt;![.\x{80}-\x{10FFFF}\w])else(\s)+if\b</string>
			<key>name</key>
			<string>invalid.deprecated.onyx</string>
		</dict>





			<!--

		WTF WHAT THE FUCK FUCK!!!???


		<dict>
			<key>comment</key>
			<string>Case with same indent bare conditions</string>

			<key>name</key>
			<string>meta.function.method.with-arguments.onyx</string>

			<key>contentName</key>
			<string>xxx.variable.parameter.function.onyx</string>

			<key>match</key>
			<string>(\s*)(case)((\s+|\#)[^\n]*)?\n(?=\1[^\s])</string>

			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.primary.onyx</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.onyx</string>
				</dict>
			</dict>




			<key>end</key>
			<string>(\s*)(end)</string>

			<key>endCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.end.onyx</string>
				</dict>
			</dict>

			<key>patterns</key>
			<array>
			</array>



		</dict>

			-->



		<dict>
			<key>comment</key>
			<string>Pragmas / Tags</string>


			<key>match</key>
			<string>(?:^|\s)(#)([a-z][-_\w\x{2013}]*(?:\s?[:=]\s?[-\w\x{2013}]+)?)(#)</string>

			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.secondary.delimiter.onyx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.secondary.pragma.onyx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.control.secondary.delimiter.onyx</string>
				</dict>
			</dict>

		</dict>

		<dict>
			<key>comment</key>
			<string>Symbols / SetTags</string>
			<key>match</key>
			<string>(?&lt;![.\x{80}-\x{10FFFF}\w])#(?:(?:[A-Z][_\w\x{2013}]*)|(?:"[^"]+"))</string>
			<key>name</key>
			<string>variable.other.constant.onyx</string>
		</dict>

		<dict>
			<key>comment</key>
			<string>everything being a reserved word, not a value and needing a 'end' is a..</string>
			<key>match</key>
			<string>(?&lt;![.\x{80}-\x{10FFFF}\w])(BEGIN|alias|await|begin|case|abstract|class|distinct|friend|END|ensure|fun|if|ifdef|lib|module|mixin|out|rescue|with|union|enum|template|macro|then|type|unless|where)(?![.\x{80}-\x{10FFFF}\w?!])</string>
			<key>name</key>
			<string>keyword.control.primary.onyx</string>
		</dict>

		<dict>
			<key>comment</key>
			<string>everything being a reserved word, not a value and needing a 'end' is a..</string>
			<key>match</key>
			<string>(?&lt;![.\x{80}-\x{10FFFF}\w])(else|elsif|elif|in|as||of|repeat|each|for|until|while)(?![.\x{80}-\x{10FFFF}\w?!])</string>
			<key>name</key>
			<string>keyword.control.secondary.onyx</string>
		</dict>

		<dict>
			<key>comment</key>
			<string>everything being a reserved word, not a value and needing a 'end' is a..</string>
			<key>match</key>
			<string>(?&lt;![.\x{80}-\x{10FFFF}\w])(when)(?![.\x{80}-\x{10FFFF}\w?!])</string>
			<key>name</key>
			<string>keyword.control.secondary.when.onyx</string>
		</dict>

		<dict>
			<key>comment</key>
			<string>Give the end keyword an additional scope</string>
			<key>match</key>
			<string>(?&lt;![.\x{80}-\x{10FFFF}\w])(endif|endcase|endwhile|endclass|endtype|end–fn|end–if|end–type|end–case|end–while|end–repeat|end-each|end)(?![.\x{80}-\x{10FFFF}\w?!])</string>
			<key>name</key>
			<string>keyword.control.secondary.end.onyx</string>
		</dict>

		<dict>
			<key>comment</key>
			<string>contextual smart pair support for block parameters</string>
			<key>match</key>
			<string>(?&lt;![.\x{80}-\x{10FFFF}\w])do(?![.\x{80}-\x{10FFFF}\w?!])\s*</string>
			<key>name</key>
			<string>keyword.control.start-block.onyx</string>
		</dict>

		<dict>
			<key>comment</key>
			<string>contextual smart pair support</string>
			<key>match</key>
			<string>(?&lt;=\{)(\s+)</string>
			<key>name</key>
			<string>meta.syntax.onyx.start-block</string>
		</dict>

		<dict>
			<key>comment</key>
			<string> as above, just doesn't need a 'end' and does a logic operation</string>
			<key>match</key>
			<string>(?&lt;![.\x{80}-\x{10FFFF}\w])(and|not|or)(?![.\x{80}-\x{10FFFF}\w?!])</string>
			<key>name</key>
			<string>keyword.operator.logical.onyx</string>
		</dict>

		<dict>
			<key>comment</key>
			<string> just as above but being not a logical operation</string>
			<key>match</key>
			<string>(?&lt;![.\x{80}-\x{10FFFF}\w])(alias|alias_method|break|next|pointerof|typeof|sizeof|instance_sizeof|zredo|retry|return|super|undef|yield)(?![.\x{80}-\x{10FFFF}\w?!])|\bdefined\?|\bblock_given\?</string>
			<key>name</key>
			<string>keyword.control.pseudo-method.onyx</string>
		</dict>

		<dict>
			<key>match</key>
			<string>\b(nil|true|false)(?![.\x{80}-\x{10FFFF}\w?!])</string>
			<key>name</key>
			<string>constant.language.onyx</string>
		</dict>

		<dict>
			<key>match</key>
			<string>(?x)
				(?&lt;! [-\x{80}-\x{10FFFF}\w.?!] )
				(__(FILE|LINE)__ | self | this)
				(?![-\x{80}-\x{10FFFF}\w.?!])
			</string>
			<key>name</key>
			<string>variable.language.onyx</string>
		</dict>

		<dict>
			<key>comment</key>
			<string> everything being a method but having a special function is a..</string>
			<key>match</key>
			<string>(?&lt;![.\x{80}-\x{10FFFF}\w])(initialize|new|loop|include|extend|raise|getter|setter|property|private|protected|describe|it|with|delegate|def_hash|def_equals|def_equals_and_hash|forward_missing_to|record|assert_responds_to)(?![.\x{80}-\x{10FFFF}\w?!])[!?]?</string>
			<key>name</key>
			<string>keyword.other.special-method.onyx</string>
		</dict>

		<dict>
			<key>begin</key>
			<string>\b(require|gem)\b</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.special-method.onyx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>$|(?=--[ \n])</string>
			<key>name</key>
			<string>meta.require.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.variable.onyx</string>
				</dict>
			</dict>
			<key>match</key>
			<string>([@·])[a-zA-Z_\x{80}-\x{10FFFF}][-\w\x{80}-\x{10FFFF}]*[?!%=]?</string>
			<key>name</key>
			<string>variable.other.readwrite.instance.onyx</string>
		</dict>



		<dict>
			<key>name</key>
			<string>support.class.onyx</string>
			<!-- string>entity.name.type.onyx</string -->
			<key>match</key>
			<string>(?x)
				(
					['`:.]\s*
					(?:(?:\[\])?[A-Z][\[\]\w\x{80}-\x{10FFFF}]*)|(?:\[\])
				)|(
					['`:.]\s*
					\(\s*
					(?:(?:\[\])?[A-Z][\[\]\w\x{80}-\x{10FFFF}]*)|(?:\[\])
					(
						\s*\|\s*
						(?:(?:\[\])?[A-Z][\[\]\w\x{80}-\x{10FFFF}]*)|(?:\[\])
					)*
					\s*\)
				)
			</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.variable.onyx</string>
				</dict>
			</dict>
		</dict>



		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.variable.onyx</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(@@)[a-zA-Z_\x{80}-\x{10FFFF}][-\w\x{80}-\x{10FFFF}]*[?!%=]?</string>
			<key>name</key>
			<string>variable.other.readwrite.class.onyx</string>
		</dict>

		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.variable.onyx</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\$)[a-zA-Z_\x{80}-\x{10FFFF}][-\x{80}-\x{10FFFF}\w]*</string>
			<key>name</key>
			<string>variable.other.readwrite.global.onyx</string>
		</dict>

		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.variable.onyx</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\$)(!|@|&amp;|`|'|\+|\d+|~|=|/|\\|,|;|\.|&lt;|&gt;|_|\*|\$|\?|:|"|-[0adFiIlpv])</string>
			<key>name</key>
			<string>variable.other.readwrite.global.pre-defined.onyx</string>
		</dict>

		<dict>
			<key>begin</key>
			<string>\b(ENV)\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.constant.onyx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>name</key>
			<string>meta.environment-variable.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>


		<dict>
			<key>match</key>
			<string>(?&lt;![\x{80}-\x{10FFFF}\w])[A-Z\x{80}-\x{10FFFF}][\w\x{80}-\x{10FFFF}]*</string>
			<key>name</key>
			<string>support.class.onyx</string>
		</dict>

		<dict>
			<key>match</key>
			<string>(?&lt;![\x{80}-\x{10FFFF}\w])[A-Z\x{80}-\x{10FFFF}][\w\x{80}-\x{10FFFF}]*\b</string>
			<key>name</key>
			<string>variable.other.constant.onyx</string>
		</dict>










		<dict>
			<key>match</key>
			<string>(?&lt;![\w\x{80}-\x{10FFFF}])(0[xX]\h(?&gt;_?\h)*|\d(?&gt;_?\d)*(\.(?![^[:space:][:digit:]])(?&gt;_?\d)*)?([eE][-+]?\d(?&gt;_?\d)*)?|0[bB][01]+)(_?(u8|u16|u32|u64|i8|i16|i32|i64|f32|f64))?\b</string>
			<key>name</key>
			<string>constant.numeric.onyx</string>
		</dict>

		<dict>
			<key>begin</key>
			<string>:'</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.constant.onyx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>'</string>
			<key>name</key>
			<string>constant.other.symbol.single-quoted.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\['\\]</string>
					<key>name</key>
					<string>constant.character.escape.onyx</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>:"</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.constant.onyx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>name</key>
			<string>constant.other.symbol.double-quoted.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>comment</key>
			<string>Needs higher precidence than regular expressions.</string>
			<key>match</key>
			<string>/=</string>
			<key>name</key>
			<string>keyword.operator.assignment.augmented.onyx</string>
		</dict>


		<!--
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>single quoted string (does not allow interpolation)</string>
			<key>end</key>
			<string>'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\'|\\\\</string>
					<key>name</key>
					<string>constant.character.escape.onyx</string>
				</dict>
			</array>
		</dict>

		-->

		<!-- dict>
			<key>begin</key>
			<string>`</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>execute string (allows for interpolation)</string>
			<key>end</key>
			<string>`</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.interpolated.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict -->

		<dict>
			<key>begin</key>
			<string>%x\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>execute string (allow for interpolation)</string>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.interpolated.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_curly_i</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>%x\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>execute string (allow for interpolation)</string>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.interpolated.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_brackets_i</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>%x\&lt;</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>execute string (allow for interpolation)</string>
			<key>end</key>
			<string>\&gt;</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.interpolated.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_ltgt_i</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>%x\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>execute string (allow for interpolation)</string>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.interpolated.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_parens_i</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>%x([^\w])</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>execute string (allow for interpolation)</string>
			<key>end</key>
			<string>\1</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.interpolated.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>(?x)
			   (?:
			     ^                      # beginning of line
			   | (?&lt;=                   # or look-behind on:
			       [=&gt;~(?:\[,|&amp;;]
			     | [\s;]if\s			# keywords
			     | [\s;]elsif\s
			     | [\s;]while\s
			     | [\s;]unless\s
			     | [\s;]when\s
			     | [\s;]assert_match\s
			     | [\s;]or\s			# boolean opperators
			     | [\s;]and\s
			     | [\s;]not\s
			     | [\s.]index\s			# methods
			     | [\s.]scan\s
			     | [\s.]sub\s
			     | [\s.]sub!\s
			     | [\s.]gsub\s
			     | [\s.]gsub!\s
			     | [\s.]match\s
			     )
			   | (?&lt;=                  # or a look-behind with line anchor:
			        ^when\s            # duplication necessary due to limits of regex
			      | ^if\s
			      | ^elsif\s
			      | ^while\s
			      | ^unless\s
			      )
			   )
			   \s*((/))(?![*+{}?])
			</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>string.regexp.classic.onyx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>regular expressions (normal)
			we only start a regexp if the character before it (excluding whitespace)
			is what we think is before a regexp
			</string>
			<key>contentName</key>
			<string>string.regexp.classic.onyx</string>
			<key>end</key>
			<string>((/[eimnosux]*))</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>%r\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>regular expressions (literal)</string>
			<key>end</key>
			<string>\}[eimnosux]*</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.regexp.mod-r.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_curly_r</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>%r\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>regular expressions (literal)</string>
			<key>end</key>
			<string>\][eimnosux]*</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.regexp.mod-r.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_brackets_r</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>%r\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>regular expressions (literal)</string>
			<key>end</key>
			<string>\)[eimnosux]*</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.regexp.mod-r.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_parens_r</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>%r\&lt;</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>regular expressions (literal)</string>
			<key>end</key>
			<string>\&gt;[eimnosux]*</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.regexp.mod-r.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_ltgt_r</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>%r([^\w])</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>regular expressions (literal)</string>
			<key>end</key>
			<string>\1[eimnosux]*</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.regexp.mod-r.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>%[QWSR]?\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>literal capable of interpolation ()</string>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.other.literal.upper.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_parens_i</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>%[QWSR]?\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>literal capable of interpolation []</string>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.other.literal.upper.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_brackets_i</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>%[QWSR]?\&lt;</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>literal capable of interpolation &lt;&gt;</string>
			<key>end</key>
			<string>\&gt;</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.other.literal.upper.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_ltgt_i</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>%[QWSR]?\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>literal capable of interpolation -- {}</string>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.onyx.mod</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_curly_i</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>%[QWSR]([^\w])</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>literal capable of interpolation -- wildcard</string>
			<key>end</key>
			<string>\1</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.other.literal.upper.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>%[qws]\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>literal incapable of interpolation -- ()</string>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.other.literal.lower.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\\)|\\\\</string>
					<key>name</key>
					<string>constant.character.escape.onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_parens</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>%[qws]\&lt;</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>literal incapable of interpolation -- &lt;&gt;</string>
			<key>end</key>
			<string>\&gt;</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.other.literal.lower.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\\&gt;|\\\\</string>
					<key>name</key>
					<string>constant.character.escape.onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_ltgt</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>%[qws]\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>literal incapable of interpolation -- []</string>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.other.literal.lower.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\\]|\\\\</string>
					<key>name</key>
					<string>constant.character.escape.onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_brackets</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>%[qws]\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>literal incapable of interpolation -- {}</string>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.other.literal.lower.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\\}|\\\\</string>
					<key>name</key>
					<string>constant.character.escape.onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_curly</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>%[qws]([^\w])</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>literal incapable of interpolation -- wildcard</string>
			<key>end</key>
			<string>\1</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.other.literal.lower.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Cant be named because its not neccesarily an escape.</string>
					<key>match</key>
					<string>\\.</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.constant.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>symbols</string>
			<key>match</key>
			<string>(?&lt;!:)(:)(?&gt;[a-zA-Z_\x{80}-\x{10FFFF}][\w\x{80}-\x{10FFFF}]*(?&gt;[?!%]|=(?![&gt;=]))?|===?|&gt;[&gt;=]?|&lt;[&lt;=]?|&lt;=&gt;|[%&amp;`/\|]|\*\*?|=?~|[-+]@?|\[\]=?|@@?[a-zA-Z_\x{80}-\x{10FFFF}][\w\x{80}-\x{10FFFF}]*)</string>
			<key>name</key>
			<string>constant.other.symbol.onyx</string>
		</dict>

		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.constant.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>symbols</string>
			<key>match</key>
			<string>(?&gt;[a-zA-Z_\x{80}-\x{10FFFF}][\w\x{80}-\x{10FFFF}]*(?&gt;[?!%])?)(:)(?!:)</string>
			<key>name</key>
			<string>constant.other.symbol.onyx.19syntax</string>
		</dict>

		<dict>
			<key>begin</key>
			<string>^=begin</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>multiline comments</string>
			<key>end</key>
			<string>^=end</string>
			<key>name</key>
			<string>comment.block.documentation.onyx</string>
		</dict>

		<dict>
			<key>name</key>
			<string>comment.line.parse-directive.onyx</string>
			<key>match</key>
			<string>(?x)
				(?:
					^[ \t]+
				)?
				(
					--!\s
				)
				(
					.*$
				)
				\n?</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.onyx</string>
				</dict>
			</dict>
		</dict>

		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.onyx</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:^[ \t]+)?(--\|\s).*$\n?</string>
			<key>name</key>
			<string>comment.line.doc.onyx</string>
		</dict>

		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.onyx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.TODO.onyx</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?x)
				(
					--
					(?:
						\s+.*(TODO|todo)?.*$
					)
					|
					(?:
						$
					)
				)</string>
			<key>name</key>
			<string>comment.line.onyx</string>
		</dict>

		<dict>
			<key>begin</key>
			<string>^__END__\n</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>string.unquoted.program-block.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>__END__ marker</string>
			<key>contentName</key>
			<string>text.plain</string>
			<key>end</key>
			<string>(?=not)impossible</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=&lt;?xml|&lt;(?i:html\b)|!DOCTYPE (?i:html\b))</string>
					<key>end</key>
					<string>(?=not)impossible</string>
					<key>name</key>
					<string>text.html.embedded.onyx</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>text.html.basic</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>(?&gt;&lt;&lt;-("?)((?:[_\w]+_|)HTML)\b\1)</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>heredoc with embedded HTML and indented terminator</string>
			<key>contentName</key>
			<string>text.html.embedded.onyx</string>
			<key>end</key>
			<string>\s*\2$</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.unquoted.embedded.html.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>text.html.basic</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>(?&gt;&lt;&lt;-("?)((?:[_\w]+_|)SQL)\b\1)</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>heredoc with embedded SQL and indented terminator</string>
			<key>contentName</key>
			<string>text.sql.embedded.onyx</string>
			<key>end</key>
			<string>\s*\2$</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.unquoted.embedded.sql.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.sql</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>(?&gt;&lt;&lt;-("?)((?:[_\w]+_|)CSS)\b\1)</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>heredoc with embedded css and intented terminator</string>
			<key>contentName</key>
			<string>text.css.embedded.onyx</string>
			<key>end</key>
			<string>\s*\2$</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.unquoted.embedded.css.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.css</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>(?&gt;&lt;&lt;-("?)((?:[_\w]+_|)CPP)\b\1)</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>heredoc with embedded c++ and intented terminator</string>
			<key>contentName</key>
			<string>text.c++.embedded.onyx</string>
			<key>end</key>
			<string>\s*\2$</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.unquoted.embedded.cplusplus.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.c++</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>(?&gt;&lt;&lt;-("?)((?:[_\w]+_|)C)\b\1)</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>heredoc with embedded c++ and intented terminator</string>
			<key>contentName</key>
			<string>text.c.embedded.onyx</string>
			<key>end</key>
			<string>\s*\2$</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.unquoted.embedded.c.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.c</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>(?&gt;&lt;&lt;-("?)((?:[_\w]+_|)(?:JS|JAVASCRIPT))\b\1)</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>heredoc with embedded javascript and intented terminator</string>
			<key>contentName</key>
			<string>text.js.embedded.onyx</string>
			<key>end</key>
			<string>\s*\2$</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.unquoted.embedded.js.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.js</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>(?&gt;&lt;&lt;-("?)((?:[_\w]+_|)JQUERY)\b\1)</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>heredoc with embedded javascript and intented terminator</string>
			<key>contentName</key>
			<string>text.js.jquery.embedded.onyx</string>
			<key>end</key>
			<string>\s*\2$</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.unquoted.embedded.js.jquery.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.js.jquery</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>(?&gt;&lt;&lt;-("?)((?:[_\w]+_|)(?:SH|SHELL))\b\1)</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>heredoc with embedded shell and intented terminator</string>
			<key>contentName</key>
			<string>text.shell.embedded.onyx</string>
			<key>end</key>
			<string>\s*\2$</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.unquoted.embedded.shell.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.shell</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>(?&gt;&lt;&lt;-("?)((?:[_\w]+_|)RUBY)\b\1)</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>heredoc with embedded onyx and intented terminator</string>
			<key>contentName</key>
			<string>text.onyx.embedded.onyx</string>
			<key>end</key>
			<string>\s*\2$</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.unquoted.embedded.onyx.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>(?&gt;\=\s*&lt;&lt;(\w+))</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\1$</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.unquoted.heredoc.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>(?&gt;&lt;&lt;-(\w+))</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.onyx</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>heredoc with indented terminator</string>
			<key>end</key>
			<string>\s*\1$</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.onyx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.unquoted.heredoc.onyx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>

		<dict>
			<key>begin</key>
			<string>(?x)
				(?&lt;=
					\{ | do | \{\s | do\s
				)(
					\|
				)
			</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.variable.onyx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\|)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>[_a-zA-Z][_a-zA-Z0-9]*</string>
					<key>name</key>
					<string>variable.other.block.onyx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>punctuation.separator.variable.onyx</string>
				</dict>
			</array>
		</dict>




		<dict>
			<key>comment</key>
			<string>A regular identifier (var/fn) used in code</string>

			<key>name</key>
			<string>variable.other.readwrite.instance.onyx</string>

			<key>match</key>
			<string>(?x)
				[a-z_\x{80}-\x{10FFFF}]
				(?:
					[-\w\x{80}-\x{10FFFF}] *
					[\w\x{80}-\x{10FFFF}?!%=] ?
				)
				(?=[^-\w\x{80}-\x{10FFFF}])
			</string>

		</dict>





		<dict>
			<key>match</key>
			<string>=&gt;</string>
			<key>name</key>
			<string>punctuation.separator.key-value</string>
		</dict>

		<dict>
			<key>match</key>
			<string>&lt;&lt;=|%=|&amp;=|\*=|\*\*=|\+=|\-=|\^=|\|{1,2}=|&lt;&lt;|\.\.</string>
			<key>name</key>
			<string>keyword.operator.assignment.augmented.onyx</string>
		</dict>

		<dict>
			<key>match</key>
			<string>&lt;=&gt;|&lt;(?!&lt;|=)|&gt;(?!&lt;|=|&gt;)|&lt;=|&gt;=|===|==|=~|!=|!~|(?&lt;=[ \t])\?</string>
			<key>name</key>
			<string>keyword.operator.comparison.onyx</string>
		</dict>

		<dict>
			<key>match</key>
			<string>(?x)
				(?&lt;=[ \t])
				!+
				| (?&lt;![\w\x{80}-\x{10FFFF}]) not (?![.\x{80}-\x{10FFFF}\w?!])
				| &amp;&amp;
				| (?&lt;![\w\x{80}-\x{10FFFF}]) and (?![.\x{80}-\x{10FFFF}\w?!])
				| \|\|
				| (?&lt;![\w\x{80}-\x{10FFFF}]) or (?![.\x{80}-\x{10FFFF}\w?!])
				| \^
			</string>
			<key>name</key>
			<string>keyword.operator.logical.onyx</string>
		</dict>

		<dict>
			<key>match</key>
			<string>(\{\%|\%\}|\{\{|\}\})</string>
			<key>name</key>
			<string>keyword.operator.macro.onyx</string>
		</dict>

		<dict>
			<key>match</key>
			<string>(%|&amp;|\*\*|\*|\+|\-|/)</string>
			<key>name</key>
			<string>keyword.operator.arithmetic.onyx</string>
		</dict>

		<dict>
			<key>match</key>
			<string>=</string>
			<key>name</key>
			<string>keyword.operator.assignment.onyx</string>
		</dict>

		<dict>
			<key>match</key>
			<string>\||~|&gt;&gt;</string>
			<key>name</key>
			<string>keyword.operator.other.onyx</string>
		</dict>

		<dict>
			<key>match</key>
			<string>:</string>
			<key>name</key>
			<string>punctuation.separator.other.onyx</string>
		</dict>

		<dict>
			<key>match</key>
			<string>\;</string>
			<key>name</key>
			<string>punctuation.separator.statement.onyx</string>
		</dict>

		<dict>
			<key>match</key>
			<string>,</string>
			<key>name</key>
			<string>punctuation.separator.object.onyx</string>
		</dict>

		<dict>
			<key>match</key>
			<string>\.|::</string>
			<key>name</key>
			<string>punctuation.separator.method.onyx</string>
		</dict>

		<dict>
			<key>match</key>
			<string>\{|\}</string>
			<key>name</key>
			<string>punctuation.section.scope.onyx</string>
		</dict>

		<dict>
			<key>match</key>
			<string>\[|\]</string>
			<key>name</key>
			<string>punctuation.section.array.onyx</string>
		</dict>

		<dict>
			<key>match</key>
			<string>\(|\)</string>
			<key>name</key>
			<string>punctuation.section.function.onyx</string>
		</dict>

	</array>



	<key>repository</key>

	<dict>
		<key>escaped_char</key>
		<dict>
			<key>match</key>
			<string>\\(?:[0-7]{1,3}|x[\da-fA-F]{1,2}|.)</string>
			<key>name</key>
			<string>constant.character.escape.onyx</string>
		</dict>

		<key>heredoc</key>
		<dict>
			<key>begin</key>
			<string>^&lt;&lt;-?\w+</string>
			<key>end</key>
			<string>$</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>

		<key>interpolated_onyx</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.embedded.onyx</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>source.onyx.embedded.source.empty</string>
						</dict>
					</dict>
					<key>match</key>
					<string>--\{(\})</string>
					<key>name</key>
					<string>source.onyx.embedded.source</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>--\{</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.embedded.onyx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>name</key>
					<string>source.onyx.embedded.source</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#nest_curly_and_self</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.onyx</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(--@)[a-zA-Z_]\w*</string>
					<key>name</key>
					<string>variable.other.readwrite.instance.onyx</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.onyx</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(--@@)[a-zA-Z_]\w*</string>
					<key>name</key>
					<string>variable.other.readwrite.class.onyx</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.onyx</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(--\$)[a-zA-Z_]\w*</string>
					<key>name</key>
					<string>variable.other.readwrite.global.onyx</string>
				</dict>
			</array>
		</dict>

		<key>nest_brackets</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.onyx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#nest_brackets</string>
				</dict>
			</array>
		</dict>

		<key>nest_brackets_i</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.onyx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_brackets_i</string>
				</dict>
			</array>
		</dict>

		<key>nest_brackets_r</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.onyx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_brackets_r</string>
				</dict>
			</array>
		</dict>

		<key>nest_curly</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.onyx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#nest_curly</string>
				</dict>
			</array>
		</dict>

		<key>nest_curly_and_self</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\{</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.scope.onyx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#nest_curly_and_self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>

		<key>nest_curly_i</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.onyx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_curly_i</string>
				</dict>
			</array>
		</dict>

		<key>nest_curly_r</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.onyx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_curly_r</string>
				</dict>
			</array>
		</dict>

		<key>nest_ltgt</key>
		<dict>
			<key>begin</key>
			<string>\&lt;</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.onyx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\&gt;</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#nest_ltgt</string>
				</dict>
			</array>
		</dict>

		<key>nest_ltgt_i</key>
		<dict>
			<key>begin</key>
			<string>\&lt;</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.onyx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\&gt;</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_ltgt_i</string>
				</dict>
			</array>
		</dict>

		<key>nest_ltgt_r</key>
		<dict>
			<key>begin</key>
			<string>\&lt;</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.onyx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\&gt;</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_ltgt_r</string>
				</dict>
			</array>
		</dict>

		<key>nest_parens</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.onyx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#nest_parens</string>
				</dict>
			</array>
		</dict>

		<key>nest_parens_i</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.onyx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_parens_i</string>
				</dict>
			</array>
		</dict>

		<key>nest_parens_r</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.onyx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_parens_r</string>
				</dict>
			</array>
		</dict>

		<key>regex_sub</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_onyx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arbitrary-repitition.onyx</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arbitrary-repitition.onyx</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\{)\d+(,\d+)?(\})</string>
					<key>name</key>
					<string>string.regexp.arbitrary-repitition.onyx</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\[(?:\^?\])?</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.character-class.onyx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\]</string>
					<key>name</key>
					<string>string.regexp.character-class.onyx</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#escaped_char</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.onyx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>name</key>
					<string>string.regexp.group.onyx</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#regex_sub</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.onyx</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>We are restrictive in what we allow to go after the comment character to avoid false positives, since the availability of comments depend on regexp flags.</string>
					<key>match</key>
					<string>(?&lt;=^|\s)-- [[a-zA-Z0-9,. \t?!-][^\x{00}-\x{7F}]]*$</string>
					<key>name</key>
					<string>comment.line.number-sign.onyx</string>
				</dict>
			</array>
		</dict>

	</dict>
</dict>
</plist>
